/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
  /**
   *
   * @type {number}
   * @memberof Comment
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  body?: string
  /**
   *
   * @type {number}
   * @memberof Comment
   */
  postId?: number
}
/**
 *
 * @export
 * @interface CreateCommentData
 */
export interface CreateCommentData {
  /**
   *
   * @type {string}
   * @memberof CreateCommentData
   */
  body?: string
  /**
   *
   * @type {number}
   * @memberof CreateCommentData
   */
  postId?: number
}
/**
 *
 * @export
 * @interface CreatePostData
 */
export interface CreatePostData {
  /**
   *
   * @type {string}
   * @memberof CreatePostData
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof CreatePostData
   */
  author: string
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {number}
   * @memberof Post
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Post
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  author?: string
}

/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create comments
     * @param {CreateCommentData} post Post Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComments: async (post: CreateCommentData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'post' is not null or undefined
      assertParamExists('createComments', 'post', post)
      const localVarPath = `/comments`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(post, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get comment by id
     * @param {number} id Get Comment detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getCommentId', 'id', id)
      const localVarPath = `/comments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get list comments
     * @summary List Comments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListComments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/comments`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create comments
     * @param {CreateCommentData} post Post Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createComments(
      post: CreateCommentData,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createComments(post, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Get comment by id
     * @param {number} id Get Comment detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentId(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Get list comments
     * @summary List Comments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getListComments(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getListComments(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = CommentsApiFp(configuration)
  return {
    /**
     *
     * @summary Create comments
     * @param {CreateCommentData} post Post Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComments(post: CreateCommentData, options?: any): AxiosPromise<Comment> {
      return localVarFp.createComments(post, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get comment by id
     * @param {number} id Get Comment detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentId(id: number, options?: any): AxiosPromise<Comment> {
      return localVarFp.getCommentId(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Get list comments
     * @summary List Comments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListComments(options?: any): AxiosPromise<Array<Comment>> {
      return localVarFp.getListComments(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
  /**
   *
   * @summary Create comments
   * @param {CreateCommentData} post Post Payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public createComments(post: CreateCommentData, options?: AxiosRequestConfig) {
    return CommentsApiFp(this.configuration)
      .createComments(post, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get comment by id
   * @param {number} id Get Comment detail
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getCommentId(id: number, options?: AxiosRequestConfig) {
    return CommentsApiFp(this.configuration)
      .getCommentId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get list comments
   * @summary List Comments
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getListComments(options?: AxiosRequestConfig) {
    return CommentsApiFp(this.configuration)
      .getListComments(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePostData} post Post Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost: async (post: CreatePostData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'post' is not null or undefined
      assertParamExists('createPost', 'post', post)
      const localVarPath = `/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(post, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete comment by id
     * @param {number} id Delete Comment detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteCommentId', 'id', id)
      const localVarPath = `/comments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete post by id
     * @param {number} id Delete Post detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deletePostId', 'id', id)
      const localVarPath = `/posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get list posts
     * @summary List Post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListPosts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get post by id
     * @param {number} id Get Post detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getPostId', 'id', id)
      const localVarPath = `/posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePostData} post Post Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPost(
      post: CreatePostData,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(post, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Delete comment by id
     * @param {number} id Delete Comment detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCommentId(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCommentId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Delete post by id
     * @param {number} id Delete Post detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePostId(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Get list posts
     * @summary List Post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getListPosts(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getListPosts(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Get post by id
     * @param {number} id Get Post detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostId(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPostId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PostApiFp(configuration)
  return {
    /**
     *
     * @summary Create post
     * @param {CreatePostData} post Post Payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost(post: CreatePostData, options?: any): AxiosPromise<Post> {
      return localVarFp.createPost(post, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete comment by id
     * @param {number} id Delete Comment detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentId(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deleteCommentId(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete post by id
     * @param {number} id Delete Post detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostId(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deletePostId(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Get list posts
     * @summary List Post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListPosts(options?: any): AxiosPromise<Array<Post>> {
      return localVarFp.getListPosts(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get post by id
     * @param {number} id Get Post detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostId(id: number, options?: any): AxiosPromise<Post> {
      return localVarFp.getPostId(id, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
  /**
   *
   * @summary Create post
   * @param {CreatePostData} post Post Payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public createPost(post: CreatePostData, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .createPost(post, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete comment by id
   * @param {number} id Delete Comment detail
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public deleteCommentId(id: number, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .deleteCommentId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete post by id
   * @param {number} id Delete Post detail
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public deletePostId(id: number, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .deletePostId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get list posts
   * @summary List Post
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getListPosts(options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .getListPosts(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get post by id
   * @param {number} id Get Post detail
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostApi
   */
  public getPostId(id: number, options?: AxiosRequestConfig) {
    return PostApiFp(this.configuration)
      .getPostId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
